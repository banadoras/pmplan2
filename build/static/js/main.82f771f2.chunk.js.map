{"version":3,"sources":["planContext.js","phrase.js","data.js","accordion.js","plan.js","App.js","index.js"],"names":["PlanContext","createContext","PlanProvider","props","useState","list","setList","Provider","value","children","Phrase","phrase","collapsed","setCollapsed","useContext","className","onMouseDown","category","style","display","phrases","map","p","index","class","includes","type","checked","onChange","e","target","prevList","filter","item","id","title","description","instruction","Accordion","Plan","finalPlan","setFinalPlan","finalInstructions","setFinalInstructions","ta","useRef","ta2","useEffect","console","log","workingPlan","instructions","forEach","element","ref","onClick","current","select","navigator","clipboard","writeText","App","loggedIn","setLoggedIn","placeholder","onInput","rootElement","document","getElementById","createRoot","render"],"mappings":"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","file":"static/js/main.82f771f2.chunk.js","sourcesContent":["import { createContext, useState } from \"react\";\r\n\r\nconst PlanContext = createContext();\r\nconst PlanProvider = (props) => {\r\n  const [list, setList] = useState([]);\r\n  return (\r\n    <PlanContext.Provider value={[list, setList]}>\r\n      {props.children}\r\n    </PlanContext.Provider>\r\n  );\r\n};\r\nexport { PlanContext, PlanProvider };\r\n","import { useContext, useState } from \"react\";\r\nimport \"./phrase.css\";\r\nimport { PlanContext } from \"./planContext\";\r\nexport default function Phrase({ phrase }) {\r\n  const [collapsed, setCollapsed] = useState(\"none\");\r\n  const [list, setList] = useContext(PlanContext);\r\n  return (\r\n    <div>\r\n      <div\r\n        className=\"category\"\r\n        onMouseDown={() => {\r\n          if (collapsed === \"none\") {\r\n            setCollapsed(\"block\");\r\n          } else {\r\n            setCollapsed(\"none\");\r\n          }\r\n        }}\r\n      >\r\n        <div>{phrase.category}</div>\r\n        <div className=\"sep\"></div>\r\n        <div>{collapsed === \"none\" ? \"+\" : \"-\"}</div>\r\n      </div>\r\n      <div className=\"phrases\" style={{ display: collapsed }}>\r\n        {phrase.phrases.map((p, index) => {\r\n          return (\r\n            <div class=\"phrase\" key={p.id}>\r\n              <label\r\n                class={\r\n                  list.includes(p)\r\n                    ? \"phrase-label phrase-label-selected\"\r\n                    : \"phrase-label\"\r\n                }\r\n              >\r\n                <input\r\n                  type=\"checkbox\"\r\n                  checked={list.includes(p)}\r\n                  onChange={(e) => {\r\n                    if (e.target.checked) {\r\n                      setList((prevList) => [...prevList, p]);\r\n                    } else {\r\n                      setList((prevList) =>\r\n                        prevList.filter((item) => item.id !== p.id)\r\n                      );\r\n                    }\r\n                  }}\r\n                />\r\n                {p.title}\r\n              </label>\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","const phrases = [\r\n  {\r\n    category: \"Therapies\",\r\n    phrases: [\r\n      {\r\n        id: \"t0\",\r\n        title: \"Physical therapy\",\r\n        description: \"Referral to Physical therapy\",\r\n        instruction:\r\n          \"Referral to physical therapy has been provided. Please call and schedule appointmetnt to start physical therapy.\"\r\n      },\r\n      {\r\n        id: \"t1\",\r\n        title: \"Pain psychology\",\r\n        description: \"Referral to pain psychology provided\",\r\n        instruction:\r\n          \"Referral to pain psychology for CBT, coping skills and relaxation techniques has been placed. Please call and schedule appointment\"\r\n      },\r\n      {\r\n        id: \"t2\",\r\n        title: \"Integrative Medicine\",\r\n        description:\r\n          \"Referral to pain integrative medicine. Offers Massage, Accupuncture and Chiropractic therapies.\"\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    category: \"Medications\",\r\n    phrases: [\r\n      {\r\n        id: \"m0\",\r\n        title: \"Gabapentin\",\r\n        description: \"Titrate Gabapentin gradually as tolerated to 300 mg TID\"\r\n      },\r\n      {\r\n        id: \"m01\",\r\n        title: \"Lyrica\",\r\n        description: \"Titrate Lyrica gradually as tolerated to 50 mg TID\"\r\n      },\r\n      {\r\n        id: \"m02\",\r\n        title: \"Cymbalta\",\r\n        description: \"Cymbalta 30 mg daily\"\r\n      },\r\n      {\r\n        id: \"m1\",\r\n        title: \"Robaxin\",\r\n        description: \"Robaxin 750 mg TID PRN for muscle spasms\"\r\n      },\r\n      {\r\n        id: \"m2\",\r\n        title: \"Zanaflex\",\r\n        description: \"Zanaflex 2 mg TID PRN for muscle spasms\"\r\n      },\r\n      {\r\n        id: \"m20\",\r\n        title: \"Baclofen\",\r\n        description: \"Baclofen 5-10 mg TID PRN for muscle spasms\"\r\n      },\r\n      {\r\n        id: \"m3\",\r\n        title: \"Diclofenac\",\r\n        description: \"Diclofenac 50 mg BID PRN\"\r\n      },\r\n      {\r\n        id: \"m4\",\r\n        title: \"Mobic\",\r\n        description: \"Mobic 7.5 mg daily PRN\"\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    category: \"Procedures\",\r\n    phrases: [\r\n      {\r\n        id: \"p0\",\r\n        title: \"General Instructions\",\r\n        description:\r\n          \"NPO for 8 hours before procedure except for medications, clear liquids ok for 2 hours prior to procedure. Needs a driver.\",\r\n        instruction:\r\n          \"Do not eat or drink for 8 hours before procedure. Can take medications with small sip of water. Clear liquids are ok untill 2 hours before procedure. Will need a driver to be with you on the day of procedure.\"\r\n      },\r\n      {\r\n        id: \"p1\",\r\n        title: \"Anticoagulation\",\r\n        description:\r\n          \"Require clearance from PCP / Cardiologist to temporarily hold *** for *** prior to procedure.\"\r\n      },\r\n      {\r\n        id: \"p2\",\r\n        title: \"LESI\",\r\n        description: \"May schedule lumbar epidural steroid injection\"\r\n      },\r\n      {\r\n        id: \"p3\",\r\n        title: \"Lidocaine Infusion\",\r\n        description: \"Schedule Lidocaine infusion.\"\r\n      },\r\n      {\r\n        id: \"p4\",\r\n        title: \"Ketamine Infusion\",\r\n        description: \"Schedule Ketamine infusion.\"\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    category: \"Images\",\r\n    phrases: [\r\n      {\r\n        id: \"i0\",\r\n        title: \"X-ray\",\r\n        description: \"X-ray *** to evaluate for ***\"\r\n      },\r\n      {\r\n        id: \"i1\",\r\n        title: \"MRI lumbar spine\",\r\n        description:\r\n          \"MRI lumbar spine with/without contrast to evaluate for ongoing low back pain\"\r\n      },\r\n      {\r\n        id: \"i2\",\r\n        title: \"CT-Scan lumbar spine\",\r\n        description:\r\n          \"CT-scan lumbar spine without contrast to evaluate for ongoing low back pain\"\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    category: \"Labs\",\r\n    phrases: [\r\n      {\r\n        id: \"l0\",\r\n        title: \"Basic labs\",\r\n        description: \"Blood work up inlcuding CBC, lytes and coags\",\r\n        instruction:\r\n          \"Blood work ordered today. Please stop at the lab to draw labs.\"\r\n      }\r\n    ]\r\n  }\r\n];\r\n\r\nexport default phrases;\r\n","import Phrase from \"./phrase\";\r\nimport phrases from \"./data\";\r\nimport \"./accordion.css\";\r\nexport default function Accordion() {\r\n  return (\r\n    <div className=\"accordion\">\r\n      {phrases.map((phrase, index) => {\r\n        return <Phrase key={index} phrase={phrase} />;\r\n      })}\r\n    </div>\r\n  );\r\n}\r\n","import { useContext, useEffect, useRef, useState } from \"react\";\r\nimport { PlanContext } from \"./planContext\";\r\nimport \"./plan.css\";\r\nexport default function Plan() {\r\n  const [list, setList] = useContext(PlanContext);\r\n  const [finalPlan, setFinalPlan] = useState(\"\");\r\n  const [finalInstructions, setFinalInstructions] = useState(\"\");\r\n  const ta = useRef();\r\n  const ta2 = useRef();\r\n  useEffect(() => {\r\n    console.log(list);\r\n    let workingPlan = \"\";\r\n    let instructions = \"\";\r\n    list.forEach((element) => {\r\n      workingPlan += \"- \" + element.description + \"\\n\";\r\n      instructions +=\r\n        \"- \" +\r\n        (element.instruction ? element.instruction : element.description) +\r\n        \"\\n\";\r\n    });\r\n    setFinalPlan(workingPlan);\r\n    setFinalInstructions(instructions);\r\n  }, [list]);\r\n  return (\r\n    <div className=\"plan\">\r\n      <h4>Plan</h4>\r\n      {finalPlan === \"\" ? <p className=\"no-plan\">No plan items</p> : \"\"}\r\n      {/* <p>{finalPlan === \"\" ? \"No plan items\" : \"\"}</p> */}\r\n      <textarea ref={ta} value={finalPlan} onChange={(e)=>setFinalPlan(e.target.value)}></textarea>\r\n      <h4>Patient Instructions</h4>\r\n      {finalInstructions === \"\" ? (\r\n        <p className=\"no-plan\">No Instructions items</p>\r\n      ) : (\r\n        \"\"\r\n      )}\r\n      <textarea ref={ta2} value={finalInstructions} onChange={(e)=>setFinalInstructions(e.target.value)}></textarea>\r\n      <div className=\"buttons\">\r\n        <button\r\n          onClick={() => {\r\n            ta.current.select();\r\n            navigator.clipboard.writeText(finalPlan);\r\n          }}\r\n        >\r\n          Copy Plan\r\n        </button>\r\n        <button\r\n          onClick={() => {\r\n            ta2.current.select();\r\n            navigator.clipboard.writeText(finalPlan);\r\n          }}\r\n        >\r\n          Copy Instructions\r\n        </button>\r\n        <button onClick={() => setList([])}>Reset Plan</button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import { useState } from \"react\";\nimport Accordion from \"./accordion\";\nimport Nav from \"./nav\";\nimport Plan from \"./plan\";\nimport \"./styles.css\";\n\nexport default function App() {\n  const [loggedIn, setLoggedIn] = useState(false);\n  return (\n    <div className=\"App\">\n      <h3 className=\"title\">Pain Medicine Plan</h3>\n      <div className={loggedIn ? \"main\" : \"main blur\"}>\n        <Accordion />\n        <Plan />\n      </div>\n      {!loggedIn ? (\n        <div className=\"alert-modal\">\n          <input\n            type=\"password\"\n            placeholder=\"Enter Code\"\n            onInput={(e) => {\n              if (e.target.value === \"1234\") {\n                setLoggedIn(true);\n              }\n            }}\n          />\n        </div>\n      ) : (\n        \"\"\n      )}\n    </div>\n  );\n}\n","import { StrictMode } from \"react\";\nimport { createRoot } from \"react-dom/client\";\n\nimport App from \"./App\";\nimport { PlanProvider } from \"./planContext\";\n\nconst rootElement = document.getElementById(\"root\");\nconst root = createRoot(rootElement);\n\nroot.render(\n  <StrictMode>\n    <PlanProvider>\n      <App />\n    </PlanProvider>\n  </StrictMode>\n);\n"],"sourceRoot":""}